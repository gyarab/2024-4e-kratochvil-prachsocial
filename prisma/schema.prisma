//https://www.prisma.io/docs/orm/overview/databases/postgresql

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"] // Podpora pro fulltextove vyhledavani v PostgreSQL
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Uzivatelsky model
model User {
  id                    String         @id
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  // Relace
  sessions              Session[]
  posts                 Post[]
  following             Follow[]       @relation("Following") // Koho uzivatel sleduje
  followers             Follow[]       @relation("Followers") // Kdo sleduje uzivatele
  likes                 Like[]
  saved_posts           Saved[]
  comments              Comment[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  createdAt DateTime @default(now())

  @@map("users")
}

// Model pro session (prihlaseni)
model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Model pro sledovani uzivatelu
model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // Uzivatel muze sledovat jineho uzivatele jen jednou
  @@map("follows")
}

// Model pro prispevky
model Post {
  id            String         @id @default(cuid())
  content       String
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments   Media[]
  likes         Like[]
  saved_posts   Saved[]
  comments      Comment[]
  notifications Notification[]

  createdAt DateTime @default(now())

  @@map("posts")
}

// Model pro media (obrazky, videa) prilohy k prispevkum
model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

// Typy medii
enum MediaType {
  IMAGE
  VIDEO
}

// Model pro komentare
model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("comments")
}

// Model pro likes
model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Uzivatel muze likovat prispevek jen jednou
  @@map("likes")
}

// Model pro ulozene prispevky
model Saved {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Uzivatel muze ulozit prispevek jen jednou
  @@map("saved_posts")
}

// Model pro notifikace
model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

// Typy notifikaci
enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
